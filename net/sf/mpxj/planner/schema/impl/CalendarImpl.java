//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.3-b18-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2007.02.21 at 11:46:13 GMT 
//


package net.sf.mpxj.planner.schema.impl;

public class CalendarImpl implements net.sf.mpxj.planner.schema.Calendar, com.sun.xml.bind.RIElement, com.sun.xml.bind.JAXBObject, net.sf.mpxj.planner.schema.impl.runtime.UnmarshallableObject, net.sf.mpxj.planner.schema.impl.runtime.XMLSerializable, net.sf.mpxj.planner.schema.impl.runtime.ValidatableObject
{

    protected com.sun.xml.bind.util.ListImpl _Calendar;
    protected net.sf.mpxj.planner.schema.OverriddenDayTypes _OverriddenDayTypes;
    protected net.sf.mpxj.planner.schema.Days _Days;
    protected net.sf.mpxj.planner.schema.DefaultWeek _DefaultWeek;
    protected java.lang.String _Name;
    protected java.lang.String _Id;
    public final static java.lang.Class version = (net.sf.mpxj.planner.schema.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (net.sf.mpxj.planner.schema.Calendar.class);
    }

    public java.lang.String ____jaxb_ri____getNamespaceURI() {
        return "";
    }

    public java.lang.String ____jaxb_ri____getLocalName() {
        return "calendar";
    }

    protected com.sun.xml.bind.util.ListImpl _getCalendar() {
        if (_Calendar == null) {
            _Calendar = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _Calendar;
    }

    public java.util.List getCalendar() {
        return _getCalendar();
    }

    public net.sf.mpxj.planner.schema.OverriddenDayTypes getOverriddenDayTypes() {
        return _OverriddenDayTypes;
    }

    public void setOverriddenDayTypes(net.sf.mpxj.planner.schema.OverriddenDayTypes value) {
        _OverriddenDayTypes = value;
    }

    public net.sf.mpxj.planner.schema.Days getDays() {
        return _Days;
    }

    public void setDays(net.sf.mpxj.planner.schema.Days value) {
        _Days = value;
    }

    public net.sf.mpxj.planner.schema.DefaultWeek getDefaultWeek() {
        return _DefaultWeek;
    }

    public void setDefaultWeek(net.sf.mpxj.planner.schema.DefaultWeek value) {
        _DefaultWeek = value;
    }

    public java.lang.String getName() {
        return _Name;
    }

    public void setName(java.lang.String value) {
        _Name = value;
    }

    public java.lang.String getId() {
        return _Id;
    }

    public void setId(java.lang.String value) {
        _Id = value;
    }

    public net.sf.mpxj.planner.schema.impl.runtime.UnmarshallingEventHandler createUnmarshaller(net.sf.mpxj.planner.schema.impl.runtime.UnmarshallingContext context) {
        return new net.sf.mpxj.planner.schema.impl.CalendarImpl.Unmarshaller(context);
    }

    public void serializeBody(net.sf.mpxj.planner.schema.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_Calendar == null)? 0 :_Calendar.size());
        context.startElement("", "calendar");
        int idx_4 = idx1;
        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _DefaultWeek), "DefaultWeek");
        for (int _6 = 1; ((_6 > 0)&&(_OverriddenDayTypes!= null)); _6 --) {
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _OverriddenDayTypes), "OverriddenDayTypes");
        }
        for (int _7 = 1; ((_7 > 0)&&(_Days!= null)); _7 --) {
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Days), "Days");
        }
        while (idx_4 != len1) {
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Calendar.get(idx_4 ++)), "Calendar");
        }
        context.endNamespaceDecls();
        int idx_11 = idx1;
        context.startAttribute("", "name");
        try {
            context.text(((java.lang.String) _Name), "Name");
        } catch (java.lang.Exception e) {
            net.sf.mpxj.planner.schema.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "id");
        try {
            context.text(((java.lang.String) _Id), "Id");
        } catch (java.lang.Exception e) {
            net.sf.mpxj.planner.schema.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _DefaultWeek), "DefaultWeek");
        for (int _12 = 1; ((_12 > 0)&&(_OverriddenDayTypes!= null)); _12 --) {
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _OverriddenDayTypes), "OverriddenDayTypes");
        }
        for (int _13 = 1; ((_13 > 0)&&(_Days!= null)); _13 --) {
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Days), "Days");
        }
        while (idx_11 != len1) {
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Calendar.get(idx_11 ++)), "Calendar");
        }
        context.endAttributes();
        context.childAsBody(((com.sun.xml.bind.JAXBObject) _DefaultWeek), "DefaultWeek");
        for (int _14 = 1; ((_14 > 0)&&(_OverriddenDayTypes!= null)); _14 --) {
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _OverriddenDayTypes), "OverriddenDayTypes");
        }
        for (int _15 = 1; ((_15 > 0)&&(_Days!= null)); _15 --) {
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Days), "Days");
        }
        while (idx1 != len1) {
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Calendar.get(idx1 ++)), "Calendar");
        }
        context.endElement();
    }

    public void serializeAttributes(net.sf.mpxj.planner.schema.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_Calendar == null)? 0 :_Calendar.size());
    }

    public void serializeURIs(net.sf.mpxj.planner.schema.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_Calendar == null)? 0 :_Calendar.size());
    }

    public java.lang.Class getPrimaryInterface() {
        return (net.sf.mpxj.planner.schema.Calendar.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
+"\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv."
+"grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000"
+"\fcontentModelt\u0000 Lcom/sun/msv/grammar/Expression;xr\u0000\u001ecom.sun."
+"msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Lj"
+"ava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0003xppp\u0000sr\u0000\u001fcom.sun.msv.gra"
+"mmar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0003L\u0000\u0004exp2q\u0000~\u0000\u0003xq\u0000~\u0000\u0004ppsq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007pps"
+"q\u0000~\u0000\u0007ppsq\u0000~\u0000\u0007ppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
+"\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0003L\u0000\tnameClassq\u0000~\u0000\u0001xq\u0000~\u0000\u0004ppsr\u0000\u001bcom.sun.msv.gramma"
+"r.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L"
+"\u0000\u0006exceptq\u0000~\u0000\u0003L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0004pp"
+"sr\u0000-com.sun.msv.datatype.xsd.NormalizedStringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000"
+"xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlway"
+"sValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'c"
+"om.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespac"
+"eUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u0019L\u0000\nwhiteSpacet\u0000.Lco"
+"m/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w"
+"3.org/2001/XMLSchemat\u0000\u0010normalizedStringsr\u00004com.sun.msv.datat"
+"ype.xsd.WhiteSpaceProcessor$Replace\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.ms"
+"v.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun."
+"msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004pps"
+"r\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0019L\u0000"
+"\fnamespaceURIq\u0000~\u0000\u0019xpt\u0000\u0005CDATAt\u0000\u0000sr\u0000#com.sun.msv.grammar.Simpl"
+"eNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0019L\u0000\fnamespaceURIq\u0000~\u0000\u0019xr"
+"\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0004nameq\u0000~\u0000&sq\u0000~"
+"\u0000\u000eppq\u0000~\u0000\u0013sq\u0000~\u0000\'t\u0000\u0002idq\u0000~\u0000&sq\u0000~\u0000\u0000pp\u0000sr\u0000\u001dcom.sun.msv.grammar.Ch"
+"oiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\bppsr\u0000 com.sun.msv.grammar.OneOrMoreE"
+"xp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003e"
+"xpq\u0000~\u0000\u0003xq\u0000~\u0000\u0004sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000"
+"~\u0000\u000eq\u0000~\u00005psr\u00002com.sun.msv.grammar.Expression$AnyStringExpress"
+"ion\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004sq\u0000~\u00004\u0001q\u0000~\u00008sr\u0000 com.sun.msv.grammar.AnyN"
+"ameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000(sr\u00000com.sun.msv.grammar.Expression$"
+"EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0004q\u0000~\u00009q\u0000~\u0000=sq\u0000~\u0000\'t\u0000&net.sf."
+"mpxj.planner.schema.DefaultWeekt\u0000+http://java.sun.com/jaxb/x"
+"jc/dummy-elementssq\u0000~\u0000/ppsq\u0000~\u0000\u0000q\u0000~\u00005p\u0000sq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00005psq"
+"\u0000~\u0000\u000eq\u0000~\u00005pq\u0000~\u00008q\u0000~\u0000;q\u0000~\u0000=sq\u0000~\u0000\'t\u0000-net.sf.mpxj.planner.schema"
+".OverriddenDayTypesq\u0000~\u0000@q\u0000~\u0000=sq\u0000~\u0000/ppsq\u0000~\u0000\u0000q\u0000~\u00005p\u0000sq\u0000~\u0000/ppsq"
+"\u0000~\u00001q\u0000~\u00005psq\u0000~\u0000\u000eq\u0000~\u00005pq\u0000~\u00008q\u0000~\u0000;q\u0000~\u0000=sq\u0000~\u0000\'t\u0000\u001fnet.sf.mpxj.pl"
+"anner.schema.Daysq\u0000~\u0000@q\u0000~\u0000=sq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00005psq\u0000~\u0000\u0000q\u0000~\u00005p\u0000"
+"sq\u0000~\u0000/ppsq\u0000~\u00001q\u0000~\u00005psq\u0000~\u0000\u000eq\u0000~\u00005pq\u0000~\u00008q\u0000~\u0000;q\u0000~\u0000=sq\u0000~\u0000\'t\u0000#net."
+"sf.mpxj.planner.schema.Calendarq\u0000~\u0000@q\u0000~\u0000=sq\u0000~\u0000\'t\u0000\bcalendarq\u0000"
+"~\u0000&sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTa"
+"blet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-c"
+"om.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005co"
+"untB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/Expressi"
+"onPool;xp\u0000\u0000\u0000\u0011\u0001pq\u0000~\u0000Aq\u0000~\u0000Hq\u0000~\u0000Oq\u0000~\u0000Pq\u0000~\u0000\fq\u0000~\u00000q\u0000~\u0000Cq\u0000~\u0000Jq\u0000~\u0000\n"
+"q\u0000~\u0000Rq\u0000~\u0000\rq\u0000~\u0000\u000bq\u0000~\u00003q\u0000~\u0000Dq\u0000~\u0000Kq\u0000~\u0000Sq\u0000~\u0000\tx"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends net.sf.mpxj.planner.schema.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(net.sf.mpxj.planner.schema.impl.runtime.UnmarshallingContext context) {
            super(context, "-------------");
        }

        protected Unmarshaller(net.sf.mpxj.planner.schema.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return net.sf.mpxj.planner.schema.impl.CalendarImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  11 :
                        if (("calendar" == ___local)&&("" == ___uri)) {
                            _getCalendar().add(((net.sf.mpxj.planner.schema.impl.CalendarImpl) spawnChildFromEnterElement((net.sf.mpxj.planner.schema.impl.CalendarImpl.class), 11, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        break;
                    case  1 :
                        attIdx = context.getAttribute("", "name");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 4;
                            continue outer;
                        }
                        break;
                    case  10 :
                        if (("calendar" == ___local)&&("" == ___uri)) {
                            _getCalendar().add(((net.sf.mpxj.planner.schema.impl.CalendarImpl) spawnChildFromEnterElement((net.sf.mpxj.planner.schema.impl.CalendarImpl.class), 11, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        state = 11;
                        continue outer;
                    case  7 :
                        if (("default-week" == ___local)&&("" == ___uri)) {
                            _DefaultWeek = ((net.sf.mpxj.planner.schema.impl.DefaultWeekImpl) spawnChildFromEnterElement((net.sf.mpxj.planner.schema.impl.DefaultWeekImpl.class), 8, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        break;
                    case  0 :
                        if (("calendar" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 1;
                            return ;
                        }
                        break;
                    case  4 :
                        attIdx = context.getAttribute("", "id");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 7;
                            continue outer;
                        }
                        break;
                    case  12 :
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  8 :
                        if (("overridden-day-types" == ___local)&&("" == ___uri)) {
                            _OverriddenDayTypes = ((net.sf.mpxj.planner.schema.impl.OverriddenDayTypesImpl) spawnChildFromEnterElement((net.sf.mpxj.planner.schema.impl.OverriddenDayTypesImpl.class), 9, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        state = 9;
                        continue outer;
                    case  9 :
                        if (("days" == ___local)&&("" == ___uri)) {
                            _Days = ((net.sf.mpxj.planner.schema.impl.DaysImpl) spawnChildFromEnterElement((net.sf.mpxj.planner.schema.impl.DaysImpl.class), 10, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        state = 10;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Name = com.sun.xml.bind.WhiteSpaceProcessor.replace(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Id = com.sun.xml.bind.WhiteSpaceProcessor.replace(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  11 :
                        if (("calendar" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 12;
                            return ;
                        }
                        break;
                    case  1 :
                        attIdx = context.getAttribute("", "name");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 4;
                            continue outer;
                        }
                        break;
                    case  10 :
                        state = 11;
                        continue outer;
                    case  4 :
                        attIdx = context.getAttribute("", "id");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 7;
                            continue outer;
                        }
                        break;
                    case  12 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  8 :
                        state = 9;
                        continue outer;
                    case  9 :
                        state = 10;
                        continue outer;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  1 :
                        if (("name" == ___local)&&("" == ___uri)) {
                            state = 2;
                            return ;
                        }
                        break;
                    case  10 :
                        state = 11;
                        continue outer;
                    case  4 :
                        if (("id" == ___local)&&("" == ___uri)) {
                            state = 5;
                            return ;
                        }
                        break;
                    case  12 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  8 :
                        state = 9;
                        continue outer;
                    case  9 :
                        state = 10;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  1 :
                        attIdx = context.getAttribute("", "name");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 4;
                            continue outer;
                        }
                        break;
                    case  10 :
                        state = 11;
                        continue outer;
                    case  6 :
                        if (("id" == ___local)&&("" == ___uri)) {
                            state = 7;
                            return ;
                        }
                        break;
                    case  3 :
                        if (("name" == ___local)&&("" == ___uri)) {
                            state = 4;
                            return ;
                        }
                        break;
                    case  4 :
                        attIdx = context.getAttribute("", "id");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = 7;
                            continue outer;
                        }
                        break;
                    case  12 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  8 :
                        state = 9;
                        continue outer;
                    case  9 :
                        state = 10;
                        continue outer;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  1 :
                            attIdx = context.getAttribute("", "name");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText1(v);
                                state = 4;
                                continue outer;
                            }
                            break;
                        case  2 :
                            eatText1(value);
                            state = 3;
                            return ;
                        case  10 :
                            state = 11;
                            continue outer;
                        case  4 :
                            attIdx = context.getAttribute("", "id");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText2(v);
                                state = 7;
                                continue outer;
                            }
                            break;
                        case  12 :
                            revertToParentFromText(value);
                            return ;
                        case  8 :
                            state = 9;
                            continue outer;
                        case  9 :
                            state = 10;
                            continue outer;
                        case  5 :
                            eatText2(value);
                            state = 6;
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
